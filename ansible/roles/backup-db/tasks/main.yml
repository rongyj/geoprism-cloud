
- name: Does the backup manager exist already?
  stat: path=/manager/backup.sh
  register: backup_shell_exists
  become: yes
  become_method: sudo
  
- name: Make backups dir
  file:
    state: directory
    path: "{{backup_dir}}"
    mode: 0700
    owner: nfsnobody
    recurse: yes
  become: yes
  become_method: sudo
  when: backup_dir is defined
- name: Make manager dir
  file:
    state: directory
    path: "/manager"
    mode: 0700
    owner: root
    recurse: yes
  become: yes
  become_method: sudo
  
- name: Write backup script header
  copy:
    content: |
      #!/bin/bash
      # DO NOT MODIFY THIS FILE IT IS AUTOMATICALLY GENERATED BY ANSIBLE SCRIPTS AND WILL BE OVERRIDDEN NEXT TIME WE DEPLOY
      if [ -z ${1+x} ]; then timestamp=$(date +"%Y-%m-%d-%H-%M-%S"); else timestamp=$1; fi
      if [ -z ${2+x} ]; then backup_version="{{backup_version}}"; else backup_version=$2; fi
      
      docker exec postgres bash -c "rm -r /manager/backups"
      docker exec postgres bash -c "mkdir -p /manager/backups"
      
      mkdir -p {{backup_dir}}/$backup_version-$timestamp
      
    dest: /manager/backup.sh
    mode: 0700
    owner: root
    force: yes
  become: yes
  become_method: sudo
  
- name: Write backup script for each app
  shell: |
      echo '
        {{item}}_backup_path={{backup_dir}}/$backup_version-$timestamp/{{item}}.backup
        docker exec postgres bash -c "pg_dump -p {{ db_port | default(5432) }} -h 127.0.0.1 -U postgres -Fc -b -v -f \"/manager/backups/{{item}}-$timestamp.backup\" {{item}}"
        docker cp postgres:/manager/backups/{{item}}-$timestamp.backup ${{item}}_backup_path
        echo "Finished saving a database backup to ${{item}}_backup_path"
      ' >> /manager/backup.sh
  with_items:
    - "{{apps}}"
  become: yes
  become_method: sudo
  
# - name: Register backup script with cron
#   cron:
#     name: backup_geoprism
#     state: present
#     job: /manager/backup.sh
#     minute: "{{backup_minute}}"
#     hour: "{{backup_hour}}"
#     day: "{{backup_day}}"
#     month: "{{backup_month}}"
#     weekday: "{{backup_weekday}}"
#     user: root
#   become: yes
#   become_method: sudo
  
# - name: Back up existing server
#   command: /manager/backup.sh "{{timestamp}}"
#   become: yes
#   become_method: sudo
#   when: "backup_shell_exists.stat.exists and {{ should_backup | default(true) }}"

- name: Delete backups (SHOULD ONLY BE USED FOR DEV)
  file: 
    state: absent
    path: "{{backup_dir}}"
  become: yes
  become_method: sudo
  when: clean_backups
  