
# PostCondition: The vault on docker will be copied to /tmp/staging/vault, if it exists. If it does not exist, /tmp/staging/vault will exist as an empty directory


# - name: Make backups dir
#   file:
#     state: directory
#     path: "{{backup_dir}}"
#     mode: 0700
#     owner: nfsnobody
#     recurse: yes
#   become: yes
#   become_method: sudo
#   when: backup_dir is defined
# - name: Make manager dir
#   file:
#     state: directory
#     path: "/manager"
#     mode: 0700
#     owner: root
#     recurse: yes
#   become: yes
#   become_method: sudo

# S3 backup
# - name: Archive vault for S3
#   command: 'tar -zcvf "vault.tar.gz" -C vault .'
#   args:
#     chdir: /tmp/staging
#   become: yes
#   become_method: sudo
#   when: vault_s3_folder is defined
# - name: Backup Vault to S3
#   s3:
#     bucket: geoprism.net
#     aws_access_key: "{{aws_access_key}}"
#     aws_secret_key: "{{aws_secret_key}}"
#     region: us-west-2
#     mode: put
#     src: "/tmp/staging/vault.tar.gz"
#     object: "/{{vault_s3_folder}}/{{inventory_hostname}}.tar.gz"
#     overwrite: yes
#   when: vault_s3_folder is defined
# - name: Delete vault archive
#   file: 
#     state: absent
#     path: /tmp/staging/vault.tar.gz
#   become: yes
#   become_method: sudo
  
  
  
# - name: Write backup script header
#   copy:
#     content: |
#       #!/bin/bash
#       # DO NOT MODIFY THIS FILE IT IS AUTOMATICALLY GENERATED BY ANSIBLE SCRIPTS AND WILL BE OVERRIDDEN NEXT TIME WE DEPLOY
#       
#       # If geoprism docker container is running
#       if docker top geoprism &>/dev/null
#       then
#         docker exec geoprism bash -c 'mkdir -p /usr/local/tomcat/vault'
#         
#         # If the vault is not empty
#         if [ -n "$(docker exec geoprism ls vault)" ]
#         then
#           rm -r /tmp/staging/vault
#           docker cp geoprism:/usr/local/tomcat/vault /tmp/staging
#         else
#           echo "Unable to backup vault because the container's vault is empty!"
#           exit 0
#         fi
#       else
#         echo "The geoprism docker container is not running. Unable to backup."
#         exit 0
#       fi
#       
#     dest: /manager/backup.sh
#     mode: 0700
#     owner: root
#     force: yes
#   become: yes
#   become_method: sudo

# - name: Write vault NAS backup code
#   shell: |
#       echo '
#         if [ -z ${1+x} ]; then timestamp=$(date +"%Y-%m-%d-%H-%M-%S"); else timestamp=$1; fi
#         if [ -z ${2+x} ]; then backup_version="{{backup_version}}"; else backup_version=$2; fi
#       
#         backup_path={{backup_dir}}/$backup_version-$timestamp
#         
#         mkdir -p $backup_path
#         cp -r /tmp/staging/vault $backup_path
#         echo "Finished saving the vault to $backup_path"
#       ' >> /manager/backup.sh
#   when: backup_dir is defined
#   become: yes
#   become_method: sudo
  
# TODO : S3 vault backup code
  
# - name: Register backup script with cron
#   cron:
#     name: backup_geoprism
#     state: present
#     job: /manager/backup.sh
#     minute: "{{backup_minute}}"
#     hour: "{{backup_hour}}"
#     day: "{{backup_day}}"
#     month: "{{backup_month}}"
#     weekday: "{{backup_weekday}}"
#     user: root
#   when: backup_day is defined and should_backup
#   become: yes
#   become_method: sudo
  
# - name: Back up existing server
#   command: /manager/backup.sh "{{timestamp|default(None)}}"
#   become: yes
#   become_method: sudo
#   when: should_backup | default(true)

- name: Does the docker volume exist already?
  stat: path=/opt/webserver/vault
  register: volume_exists
  become: yes
  become_method: sudo
- name: Copy volume to docker volume vault
  shell: 'docker cp "geoprism:{{catalina_home}}/vault" /opt/webserver/vault'
  when: "not volume_exists.stat.exists"

# - name: Delete NAS backups (SHOULD ONLY BE USED FOR DEV)
#   file: 
#     state: absent
#     path: "{{backup_dir}}"
#   become: yes
#   become_method: sudo
#   when: (clean_backups == true) and back_dir is defined
  