
# Our job is to SSH into the database server, install docker and a postgres image
# This script is useful for when we're not using amazon RDS but just a bare bones server

# Thinking about upgrading? 9.5 -> 9.6 requires a data migration https://github.com/janLo/postgres-docker-upgrade

- name: Delete Data
  file:
    state: absent
    path: /docker/volumes/postgresql/data
  become: yes
  become_method: sudo
  when: "{{clean_db | default(false)}}"

# This item is only used to migrate systems that were built before we started using volumes 
- name: Db Volume Migrate Make directory
  file:
    state: directory
    path: /docker/volumes/postgresql
  become: yes
  become_method: sudo
  when: "{{db_volume_migrate | default(false)}}"
- name: Db Volume Migrate
  shell: '{{item}}'
  with_items:
    - docker cp 'postgres:/var/lib/postgresql/data' /docker/volumes/postgresql/data
  when: "{{db_volume_migrate | default(false)}}"
  become: yes
  become_method: sudo

- name: Start Postgres Docker
  docker_container:
    name: postgres
    image: "{{ db_image | default('postgis/postgis:9.5-2.5') }}"
    state: started
    recreate: "{{clean_db | default(false)}}"
    pull: true
    env:
      POSTGRES_PASSWORD: "{{rootdb_pass}}"
    exposed_ports:
      - 5432
    ports:
      - "{{ db_port | default(5432) }}:5432"
    restart_policy: always
    volumes:
      - /docker/volumes/postgresql/data:/var/lib/postgresql/data
  become: yes
  become_method: sudo
  
# In the case that we've updated the postgis version, we need to run this code. If we haven't updated, then this code is a NOOP
- name: Wait for postgres to be up
  wait_for: 'host="127.0.0.1" port={{ db_port | default(5432) }} delay=0 timeout=60 state=started'
- name: sleep for 300 seconds
  wait_for:
    timeout: 300
  delegate_to: localhost
- name: Postgis upgrade
  shell: '{{item}}'
  with_items:
    - docker exec postgres update-postgis.sh
  become: yes
  become_method: sudo
  
# When we're recreating the docker image for some reason docker leaves the old volume just sitting around unused. This was causing us to run out of space after x number of deploys
# https://lebkowski.name/docker-volumes/
- name: Clean dangling docker volumes
  shell: "docker volume rm $(docker volume ls -qf dangling=true)"
  become: yes
  become_method: sudo
  when: "{{clean_db}}"
  ignore_errors: yes


# - name: Open port 5432 on iptables
#   iptables: 
# iptables -A INPUT -p tcp --dport 2195 -j ACCEPT
# service iptables restart