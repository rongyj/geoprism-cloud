
# If vault_s3_folder exists, then the vault will be restored from the s3 geoprism.net bucket with the specified folder.
# Otherwise, the vault will be restored from /tmp/staging/vault

# Staging must exist
#- name: Create the vault staging if not exist
#  file:
#    path: /tmp/staging/vault
#    state: directory
#    mode: 0700
#  become: yes
#  become_method: sudo
  
# Restore from S3
# - name: Download vault from S3
#   s3:
#     bucket: geoprism.net
#     aws_access_key: "{{aws_access_key}}"
#     aws_secret_key: "{{aws_secret_key}}"
#     region: us-west-2
#     mode: get
#     dest: "/tmp/staging/vault.tar.gz"
#     object: "/{{vault_s3_folder}}/{{inventory_hostname}}.tar.gz"
#     version: "{{vault_s3_version}}"
#   when: vault_s3_folder is defined
# - name: Delete vault stage
#   file: 
#     state: absent
#     path: /tmp/staging/vault
#   become: yes
#   become_method: sudo
#   when: vault_s3_folder is defined
# - name: Create the vault staging
#   file:
#     path: /tmp/staging/vault
#     state: directory
#     mode: 0700
#   become: yes
#   become_method: sudo
# - name: Unarchive vault
#   unarchive:
#     copy: no
#     src: "/tmp/staging/vault.tar.gz"
#     dest: "/tmp/staging/vault"
#   become: yes
#   become_method: sudo
#   when: vault_s3_folder is defined
  
# Deploy vault staging to docker
#- name: Restore vault to Docker
#  shell: "{{item}}"
#  with_items:
#    - docker exec geoprism bash -c 'rm -rf {{catalina_home}}/vault'
#    - docker cp /tmp/staging/vault "geoprism:{{catalina_home}}/vault"
#  become: yes
#  become_method: sudo
  
#- name: Delete vault archive
#  file: 
#    state: absent
#   path: /tmp/staging/vault.tar.gz
#  become: yes
#  become_method: sudo
  