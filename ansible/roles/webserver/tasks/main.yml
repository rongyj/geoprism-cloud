
- name: Ensure the webserver can connect to the database
  wait_for: host="{{webserver_database}}" port=5432 delay=0 timeout=10 state=started

# Docker stuff
- name: Log into ECR
  shell: "export AWS_ACCESS_KEY_ID={{aws_access_key}} && export AWS_SECRET_ACCESS_KEY={{aws_secret_key}} && eval $(aws ecr get-login --region us-west-2 --no-include-email)"
  become: yes
  become_method: sudo
# TODO: Errors out when Postgres & Geoprism are on the same machine
# - name: Stop all docker containers
#   shell: docker stop $(docker ps -a -q)
#   become: yes
#   become_method: sudo
#   ignore_errors: yes
#   when: "{{stop_all_docker_containers | default(false)}}"
- name: Start Docker
  docker_container:
    name: geoprism
    image: "{{docker_image}}"
    state: started
    recreate: yes
    pull: yes
    restart_policy: always
    env: >
        JAVA_OPTS="
        -Xms512M
        -Xmx{{tomcat_memory}}
        -Djava.rmi.server.hostname={{ inventory_hostname }}
        -Ddatabase.hostURL={{webserver_database}}
        -server
        -Dgeoprism.config.dir={{catalina_home}}/appcfg
        -Dtomcat.home={{catalina_home}}
        -Djavax.net.ssl.keyStore={{catalina_home}}/conf/geoprism.ks
        -Djavax.net.ssl.keyStorePassword={{ssl_keystore_password}}
        -Dbirt-server=true
        -DFile.encoding=UTF-8      
        -Ddatabase.user={{db_user}}
        -Ddatabase.password={{db_pass}}
        -Ddatabase.port=5432
        -Demail.username={{email_user}}
        -Demail.password={{email_pass}}
        "
    network_mode: host
  become: yes
  become_method: sudo
  
- name: Forward port (iptables)
  shell: "/sbin/iptables -t nat -I PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 8443 && /sbin/iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080 && /sbin/service iptables save"
  become: yes
  become_method: sudo
  when: "firewalld is not defined"
- name: Forward port (firewallcmd)
  shell: "firewall-cmd --permanent --add-forward-port=port=443:proto=tcp:toport=8443 && firewall-cmd --permanent --add-forward-port=port=80:proto=tcp:toport=8080 && firewall-cmd --reload"
  become: yes
  become_method: sudo
  when: "firewalld is defined"
  